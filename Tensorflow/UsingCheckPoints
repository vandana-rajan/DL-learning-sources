# USING CHECKPOINT FILES
While downloading some pre-trained models, they might have stored it as checkpoints. 
So we get a folder with files that are named similar to the following.

model.ckpt-0.data-00000-of-00001
model.ckpt-0.index
model.ckpt-0.meta

################ VISUALIZING THE CHECKPOINT GRAPH ########################################################

First thing we might want would be to visualize this trained network graph. For that, do the following inside the python command line.

>> g = tf.Graph() 
>> with g.as_default() as g: 
...     tf.train.import_meta_graph('./model.ckpt-0.meta') 
... 

<tensorflow.python.training.saver.Saver object at 0x7f160b9ff5d0>
>>> with tf.Session(graph=g) as sess: 
...     file_writer = tf.summary.FileWriter(logdir='logs/my-model', graph=g) 

Now we can see a folder 'logs/my-model' that contains a tensorflow event file.
Now, exit out of python command line and type the following in terminal

$ tensorboard --logdir='./logs/my-model'

A visualization opens up in the browser if we click the created link.

############################ GET LIST OF VARIABLE NAMES ####################################

We might need to get the names of the variables in the network. This is useful to freeze the model.

>>> from tensorflow.contrib.framework.python.framework import checkpoint_utils
>>> vars_in_check = checkpoint_utils.list_variables('model.ckpt-0') 

This will print out the list of variable names. Note that we need to give the exact name 'model.ckpt-0'. 'model.ckpt' won't work.

############################ RESTORING THE MODEL ################################

We might need to restore the saved checkpoint model. For that, do the following.

>>> with tf.Session() as sess:
...     saver = tf.train.import_meta_graph('./model.ckpt-0.meta')
...     saver.restore(sess, 'model.ckpt-0')
... 

This will restore parameters from model.ckpt-0





